{"version":3,"sources":["apollo/mutations/account.js","components/googleOAuth/GoogleOAuth.jsx","views/signUp/signUpForm/SignUpForm.jsx","views/signUp/SignUp.jsx"],"names":["LOGIN","gql","SIGN_UP","ONBOARD_USER","LOGOUT_USER","GoogleOAuth","signup","login","id","src","alt","signUpSchema","yup","shape","firstName","required","lastName","email","password1","password2","FieldSet","name","label","fieldType","children","type","errors","touched","htmlFor","as","className","SignUpForm","useState","isAuthenticated","setIsAuthenticated","useMutation","createUser","response","useEffect","data","user","to","initialValues","undefined","validationSchema","onSubmit","values","variables","password","state","SignUp","useQuery","GET_IS_LOGGED_IN","isLoggedIn","push"],"mappings":"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","file":"static/js/8.05bf081d.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const LOGIN = gql`\n  mutation LoginUser($email: String!, $password: String!) {\n    loginUser(email: $email, password: $password) {\n      user {\n        email\n      }\n    }\n  }\n`;\n\nexport const SIGN_UP = gql`\n  mutation CreateUser(\n    $email: String!\n    $firstName: String\n    $lastName: String\n    $password: String!\n  ) {\n    createUser(\n      email: $email\n      firstName: $firstName\n      lastName: $lastName\n      password: $password\n    ) {\n      user {\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`;\n\nexport const ONBOARD_USER = gql`\n  mutation OnboardUser(\n    $id: ID\n    $lastName: String\n    $preferredName: String\n    $gpa: Float\n    $actScore: Int\n    $satScore: Int\n    $efc: Int\n    $termsAndConditions: Boolean\n    $pronouns: String\n    $ethnicity: String\n    $userType: String\n    $highSchoolGradYear: Int\n    $incomeQuintile: String\n    $foundFrom: [String]\n  ) {\n    onboardUser(\n      id: $id\n      lastName: $lastName\n      preferredName: $preferredName\n      gpa: $gpa\n      actScore: $actScore\n      satScore: $satScore\n      efc: $efc\n      termsAndConditions: $termsAndConditions\n      pronouns: $pronouns\n      ethnicity: $ethnicity\n      userType: $userType\n      highSchoolGradYear: $highSchoolGradYear\n      incomeQuintile: $incomeQuintile\n      foundFrom: $foundFrom\n    ) {\n      user {\n        email\n        firstName\n        lastName\n        email\n        preferredName\n        gpa\n        actScore\n        satScore\n        efc\n        termsAndConditions\n        pronouns\n        ethnicity\n        userType\n        highSchoolGradYear\n        incomeQuintile\n        foundFrom\n      }\n    }\n  }\n`;\n\nexport const LOGOUT_USER = gql`\n  mutation LogoutUser {\n    logoutUser {\n      user {\n        email\n      }\n    }\n  }\n`;\n","import React from \"react\";\n\nimport \"./google-oauth.scss\";\n\nconst GoogleOAuth = ({ signup, login }) => {\n  return (\n    <button id=\"google-oauth-button\">\n      <img\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/1004px-Google_%22G%22_Logo.svg.png\"\n        alt=\"google-logo\"\n      />\n      {signup && \"Sign up with Google\"}\n      {login && \"Login with Google\"}\n    </button>\n  );\n};\n\nexport default GoogleOAuth;\n","import React, { useEffect, useState } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport { Link } from \"react-router-dom\";\nimport * as yup from \"yup\";\nimport { useMutation } from \"@apollo/client\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./sign-up-form.scss\";\n\nimport { SIGN_UP } from \"../../../apollo/mutations/account\";\n\nconst signUpSchema = yup.object().shape({\n  firstName: yup.string().required(\"Please enter your first name\"),\n  lastName: yup.string().required(\"Please enter your last name\"),\n  email: yup\n    .string()\n    .email(\"Invalid email\")\n    .required(\"Please enter your email\"),\n  password1: yup.string().required(\"Password is required\"),\n  password2: yup.string().required(\"Please confirm your password\"),\n});\n\nconst FieldSet = ({\n  name,\n  label,\n  fieldType,\n  children,\n  type,\n  errors,\n  touched,\n}) => (\n  <fieldset>\n    <label htmlFor={`signup-${name}`}>{label}</label>\n    <Field as={fieldType} name={name} type={type}>\n      {children}\n    </Field>\n    {errors[name] && touched[name] && (\n      <span className=\"form-error\">{errors[name]}</span>\n    )}\n  </fieldset>\n);\n\nconst SignUpForm = () => {\n  // Will move this to Index.js once I figure out how to use Apollo\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [createUser, response] = useMutation(SIGN_UP);\n\n  function handleSubmit(values) {\n    createUser({\n      variables: {\n        firstName: values.firstName,\n        lastName: values.lastName,\n        email: values.email,\n        password: values.password1,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (response?.data?.createUser?.user?.email) {\n      setIsAuthenticated(true);\n    }\n  }, [response]);\n\n  if (isAuthenticated) return <Redirect to=\"/dashboard\" />;\n\n  return (\n    <Formik\n      initialValues={{\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        password1: undefined,\n        password2: undefined,\n      }}\n      validationSchema={signUpSchema}\n      onSubmit={handleSubmit}\n    >\n      {(state) => (\n        <Form className=\"sign-up-form\">\n          <FieldSet name=\"email\" label=\"Email\" {...state} />\n          <div className=\"form-name-fields\">\n            <FieldSet name=\"firstName\" label=\"First Name\" {...state} />\n            <FieldSet name=\"lastName\" label=\"Last Name\" {...state} />\n          </div>\n          <FieldSet\n            name=\"password1\"\n            label=\"Password\"\n            type=\"password\"\n            {...state}\n          />\n          <FieldSet\n            name=\"password2\"\n            label=\"Confirm Password\"\n            type=\"password\"\n            {...state}\n          />\n\n          <div className=\"sign-up-form-footer\">\n            <p>\n              By signing up, you agree to our{\" \"}\n              <Link to=\"/terms-of-service\">Terms of Service</Link> and{\" \"}\n              <Link to=\"/privacy-policy\">Privacy Policy</Link>\n            </p>\n          </div>\n\n          <button type=\"submit\">Create Account</button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default SignUpForm;\n","import React from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\n\nimport GoogleOAuth from \"../../components/googleOAuth/GoogleOAuth\";\nimport SignUpForm from \"./signUpForm/SignUpForm\";\n\nimport { GET_IS_LOGGED_IN } from \"../../apollo/queries/account\";\n\nimport \"./sign-up.scss\";\n\nconst SignUp = () => {\n  const { data: data_isLoggedIn } = useQuery(GET_IS_LOGGED_IN);\n  const { isLoggedIn } = data_isLoggedIn;\n\n  if (isLoggedIn) return <Redirect push to=\"/dashboard\" />;\n\n  return (\n    <div className=\"authentication-container sign-up-container\">\n      <div className=\"authentication-left\">\n        <div className=\"tilt-logo\">\n          <img\n            src=\"https://www.tiltaccess.com/static/media/tilt_logo.e727179e.png\"\n            alt=\"tilt-logo\"\n          ></img>\n        </div>\n\n        <div className=\"tilt-message-container\">\n          <div className=\"tilt-message\">\n            <h2>Find affordable colleges</h2>\n            <p>We estimate college prices based on your family income</p>\n          </div>\n          <div className=\"tilt-message\">\n            <h2>Meet your Financial Aid Advisor</h2>\n            <p>They can answer any questions that come up along the way</p>\n          </div>\n          <div className=\"tilt-message\">\n            <h2>Budget for college</h2>\n            <p>We'll walk you through your scholarship and loan options</p>\n          </div>\n        </div>\n\n        <div className=\"tilt-footer\">\n          <p>Tilt 2020</p>\n        </div>\n      </div>\n\n      <div className=\"authentication-right\">\n        <div className=\"form-container\">\n          <div className=\"form-header\">\n            <h1>Create your Tilt account</h1>\n            <p>No credit card required. Cancel anytime.</p>\n          </div>\n\n          <GoogleOAuth signup />\n\n          <div className=\"form-divider\">\n            <div />\n            <span>OR</span>\n            <div />\n          </div>\n\n          <SignUpForm />\n\n          <div className=\"form-footer\">\n            <p>\n              Have an account? <Link to=\"/login\">Sign in</Link>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n"],"sourceRoot":""}