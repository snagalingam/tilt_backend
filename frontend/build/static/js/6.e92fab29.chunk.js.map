{"version":3,"sources":["../QueryData.js","../useBaseQuery.js","../useDeepMemo.js","../useQuery.js","apollo/queries/account.js","views/dashboard/Dashboard.jsx"],"names":["_super","QueryData","_a","options","context","onNewData","_this","call","this","previousData","runLazy","runLazyQuery","cleanup","lazyOptions","getQueryResult","result","observableQueryFields","getOptions","skip","data","undefined","error","loading","called","currentObservable","currentResult","getCurrentResult","partial","networkStatus","errors","length","ApolloError","graphQLErrors","Object","assign","getLastResult","fetchPolicy","partialRefetch","keys","refetch","client","setOptions","resetQueryStoreErrors","obsRefetch","variables","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","prototype","execute","refreshClient","query","removeQuerySubscription","updateObservableQuery","isMounted","startQuerySubscription","getExecuteSsrResult","getExecuteResult","executeLazy","ready","fetchData","ssr","Promise","resolve","afterExecute","_b","lazy","handleErrorOrCompleted","previousOptions","unmount","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","addQueryPromise","prepareObservableQueryOptions","verifyDocumentType","Query","displayName","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","currentSubscription","subscribe","next","previousResult","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","resetLastResults","onCompleted","onError","unsubscribe","useBaseQuery","x","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","then","memoFn","key","ref","value","useDeepMemo","queryResult","useQuery","GET_ME","gql","Dashboard","to","className","me","firstName"],"mappings":"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","file":"static/js/6.e92fab29.chunk.js","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from '../../errors/ApolloError';\nimport { NetworkStatus } from '../../core/networkStatus';\nimport { DocumentType } from '../parser/parser';\nimport { OperationData } from './OperationData';\nvar QueryData = (function (_super) {\n    __extends(QueryData, _super);\n    function QueryData(_a) {\n        var options = _a.options, context = _a.context, onNewData = _a.onNewData;\n        var _this = _super.call(this, options, context) || this;\n        _this.previousData = {};\n        _this.runLazy = false;\n        _this.runLazyQuery = function (options) {\n            _this.cleanup();\n            _this.runLazy = true;\n            _this.lazyOptions = options;\n            _this.onNewData();\n        };\n        _this.getQueryResult = function () {\n            var result = _this.observableQueryFields();\n            var options = _this.getOptions();\n            if (options.skip) {\n                result = __assign(__assign({}, result), { data: undefined, error: undefined, loading: false, called: true });\n            }\n            else if (_this.currentObservable) {\n                var currentResult = _this.currentObservable.getCurrentResult();\n                var data = currentResult.data, loading = currentResult.loading, partial = currentResult.partial, networkStatus = currentResult.networkStatus, errors = currentResult.errors;\n                var error = currentResult.error;\n                if (errors && errors.length > 0) {\n                    error = new ApolloError({ graphQLErrors: errors });\n                }\n                result = __assign(__assign({}, result), { data: data,\n                    loading: loading,\n                    networkStatus: networkStatus,\n                    error: error, called: true });\n                if (loading) {\n                }\n                else if (error) {\n                    Object.assign(result, {\n                        data: (_this.currentObservable.getLastResult() || {})\n                            .data\n                    });\n                }\n                else {\n                    var fetchPolicy = _this.currentObservable.options.fetchPolicy;\n                    var partialRefetch = options.partialRefetch;\n                    if (partialRefetch &&\n                        partial &&\n                        (!data || Object.keys(data).length === 0) &&\n                        fetchPolicy !== 'cache-only') {\n                        Object.assign(result, {\n                            loading: true,\n                            networkStatus: NetworkStatus.loading\n                        });\n                        result.refetch();\n                        return result;\n                    }\n                }\n            }\n            result.client = _this.client;\n            _this.setOptions(options, true);\n            _this.previousData.loading =\n                _this.previousData.result && _this.previousData.result.loading || false;\n            _this.previousData.result = result;\n            _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();\n            return result;\n        };\n        _this.obsRefetch = function (variables) {\n            return _this.currentObservable.refetch(variables);\n        };\n        _this.obsFetchMore = function (fetchMoreOptions) { return _this.currentObservable.fetchMore(fetchMoreOptions); };\n        _this.obsUpdateQuery = function (mapFn) { return _this.currentObservable.updateQuery(mapFn); };\n        _this.obsStartPolling = function (pollInterval) {\n            var _a;\n            (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n        };\n        _this.obsStopPolling = function () {\n            var _a;\n            (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n        };\n        _this.obsSubscribeToMore = function (options) { return _this.currentObservable.subscribeToMore(options); };\n        _this.onNewData = onNewData;\n        return _this;\n    }\n    QueryData.prototype.execute = function () {\n        this.refreshClient();\n        var _a = this.getOptions(), skip = _a.skip, query = _a.query;\n        if (skip || query !== this.previousData.query) {\n            this.removeQuerySubscription();\n            this.previousData.query = query;\n        }\n        this.updateObservableQuery();\n        if (this.isMounted)\n            this.startQuerySubscription();\n        return this.getExecuteSsrResult() || this.getExecuteResult();\n    };\n    QueryData.prototype.executeLazy = function () {\n        return !this.runLazy\n            ? [\n                this.runLazyQuery,\n                {\n                    loading: false,\n                    networkStatus: NetworkStatus.ready,\n                    called: false,\n                    data: undefined\n                }\n            ]\n            : [this.runLazyQuery, this.execute()];\n    };\n    QueryData.prototype.fetchData = function () {\n        var _this = this;\n        var options = this.getOptions();\n        if (options.skip || options.ssr === false)\n            return false;\n        return new Promise(function (resolve) { return _this.startQuerySubscription(resolve); });\n    };\n    QueryData.prototype.afterExecute = function (_a) {\n        var _b = (_a === void 0 ? {} : _a).lazy, lazy = _b === void 0 ? false : _b;\n        this.isMounted = true;\n        if (!lazy || this.runLazy) {\n            this.handleErrorOrCompleted();\n        }\n        this.previousOptions = this.getOptions();\n        return this.unmount.bind(this);\n    };\n    QueryData.prototype.cleanup = function () {\n        this.removeQuerySubscription();\n        delete this.currentObservable;\n        delete this.previousData.result;\n    };\n    QueryData.prototype.getOptions = function () {\n        var options = _super.prototype.getOptions.call(this);\n        if (this.lazyOptions) {\n            options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n            options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n        }\n        if (this.runLazy) {\n            delete options.skip;\n        }\n        return options;\n    };\n    QueryData.prototype.ssrInitiated = function () {\n        return this.context && this.context.renderPromises;\n    };\n    QueryData.prototype.getExecuteResult = function () {\n        var result = this.getQueryResult();\n        this.startQuerySubscription();\n        return result;\n    };\n    ;\n    QueryData.prototype.getExecuteSsrResult = function () {\n        var ssrDisabled = this.getOptions().ssr === false;\n        var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n        var ssrLoading = __assign({ loading: true, networkStatus: NetworkStatus.loading, called: true, data: undefined, stale: false, client: this.client }, this.observableQueryFields());\n        if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n            this.previousData.result = ssrLoading;\n            return ssrLoading;\n        }\n        var result;\n        if (this.ssrInitiated()) {\n            result =\n                this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;\n        }\n        return result;\n    };\n    QueryData.prototype.prepareObservableQueryOptions = function () {\n        var options = this.getOptions();\n        this.verifyDocumentType(options.query, DocumentType.Query);\n        var displayName = options.displayName || 'Query';\n        if (this.ssrInitiated() &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options.fetchPolicy = 'cache-first';\n        }\n        return __assign(__assign({}, options), { displayName: displayName, context: options.context });\n    };\n    QueryData.prototype.initializeObservableQuery = function () {\n        if (this.ssrInitiated()) {\n            this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n        }\n        if (!this.currentObservable) {\n            var observableQueryOptions = this.prepareObservableQueryOptions();\n            this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), { children: null });\n            this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n            if (this.ssrInitiated()) {\n                this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n            }\n        }\n    };\n    QueryData.prototype.updateObservableQuery = function () {\n        if (!this.currentObservable) {\n            this.initializeObservableQuery();\n            return;\n        }\n        var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), { children: null });\n        if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n            this.previousData.observableQueryOptions = newObservableQueryOptions;\n            this.currentObservable\n                .setOptions(newObservableQueryOptions)\n                .catch(function () { });\n        }\n    };\n    QueryData.prototype.startQuerySubscription = function (onNewData) {\n        var _this = this;\n        if (onNewData === void 0) { onNewData = this.onNewData; }\n        if (this.currentSubscription || this.getOptions().skip)\n            return;\n        this.currentSubscription = this.currentObservable.subscribe({\n            next: function (_a) {\n                var loading = _a.loading, networkStatus = _a.networkStatus, data = _a.data;\n                var previousResult = _this.previousData.result;\n                if (previousResult &&\n                    previousResult.loading === loading &&\n                    previousResult.networkStatus === networkStatus &&\n                    equal(previousResult.data, data)) {\n                    return;\n                }\n                onNewData();\n            },\n            error: function (error) {\n                _this.resubscribeToQuery();\n                if (!error.hasOwnProperty('graphQLErrors'))\n                    throw error;\n                var previousResult = _this.previousData.result;\n                if ((previousResult && previousResult.loading) ||\n                    !equal(error, _this.previousData.error)) {\n                    _this.previousData.error = error;\n                    onNewData();\n                }\n            }\n        });\n    };\n    QueryData.prototype.resubscribeToQuery = function () {\n        this.removeQuerySubscription();\n        var currentObservable = this.currentObservable;\n        if (currentObservable) {\n            var lastError = currentObservable.getLastError();\n            var lastResult = currentObservable.getLastResult();\n            currentObservable.resetLastResults();\n            this.startQuerySubscription();\n            Object.assign(currentObservable, {\n                lastError: lastError,\n                lastResult: lastResult\n            });\n        }\n    };\n    QueryData.prototype.handleErrorOrCompleted = function () {\n        if (!this.currentObservable || !this.previousData.result)\n            return;\n        var _a = this.previousData.result, data = _a.data, loading = _a.loading, error = _a.error;\n        if (!loading) {\n            var _b = this.getOptions(), query = _b.query, variables = _b.variables, onCompleted = _b.onCompleted, onError = _b.onError, skip = _b.skip;\n            if (this.previousOptions &&\n                !this.previousData.loading &&\n                equal(this.previousOptions.query, query) &&\n                equal(this.previousOptions.variables, variables)) {\n                return;\n            }\n            if (onCompleted && !error && !skip) {\n                onCompleted(data);\n            }\n            else if (onError && error) {\n                onError(error);\n            }\n        }\n    };\n    QueryData.prototype.removeQuerySubscription = function () {\n        if (this.currentSubscription) {\n            this.currentSubscription.unsubscribe();\n            delete this.currentSubscription;\n        }\n    };\n    QueryData.prototype.observableQueryFields = function () {\n        var _a;\n        return {\n            variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n            refetch: this.obsRefetch,\n            fetchMore: this.obsFetchMore,\n            updateQuery: this.obsUpdateQuery,\n            startPolling: this.obsStartPolling,\n            stopPolling: this.obsStopPolling,\n            subscribeToMore: this.obsSubscribeToMore\n        };\n    };\n    return QueryData;\n}(OperationData));\nexport { QueryData };\n//# sourceMappingURL=QueryData.js.map","import { __assign } from \"tslib\";\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { QueryData } from '../../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\nimport { getApolloContext } from '../../context/ApolloContext';\nexport function useBaseQuery(query, options, lazy) {\n    if (lazy === void 0) { lazy = false; }\n    var context = useContext(getApolloContext());\n    var _a = useReducer(function (x) { return x + 1; }, 0), tick = _a[0], forceUpdate = _a[1];\n    var updatedOptions = options ? __assign(__assign({}, options), { query: query }) : { query: query };\n    var queryDataRef = useRef();\n    var queryData = queryDataRef.current ||\n        new QueryData({\n            options: updatedOptions,\n            context: context,\n            onNewData: function () {\n                if (!queryData.ssrInitiated()) {\n                    Promise.resolve().then(forceUpdate);\n                }\n                else {\n                    forceUpdate();\n                }\n            }\n        });\n    queryData.setOptions(updatedOptions);\n    queryData.context = context;\n    if (queryData.ssrInitiated() && !queryDataRef.current) {\n        queryDataRef.current = queryData;\n    }\n    var memo = {\n        options: __assign(__assign({}, updatedOptions), { onError: undefined, onCompleted: undefined }),\n        context: context,\n        tick: tick\n    };\n    var result = useDeepMemo(function () { return (lazy ? queryData.executeLazy() : queryData.execute()); }, memo);\n    var queryResult = lazy\n        ? result[1]\n        : result;\n    useEffect(function () {\n        if (!queryDataRef.current) {\n            queryDataRef.current = queryData;\n        }\n        return function () { return queryData.cleanup(); };\n    }, []);\n    useEffect(function () { return queryData.afterExecute({ lazy: lazy }); }, [\n        queryResult.loading,\n        queryResult.networkStatus,\n        queryResult.error,\n        queryResult.data,\n    ]);\n    return result;\n}\n//# sourceMappingURL=useBaseQuery.js.map","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\nexport function useDeepMemo(memoFn, key) {\n    var ref = useRef();\n    if (!ref.current || !equal(key, ref.current.key)) {\n        ref.current = { key: key, value: memoFn() };\n    }\n    return ref.current.value;\n}\n//# sourceMappingURL=useDeepMemo.js.map","import { useBaseQuery } from './utils/useBaseQuery';\nexport function useQuery(query, options) {\n    return useBaseQuery(query, options, false);\n}\n//# sourceMappingURL=useQuery.js.map","import { gql } from \"@apollo/client\";\n\nexport const GET_ME = gql`\n  query UserQuery {\n    me {\n      firstName\n      lastName\n      email\n    }\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\n\nimport { GET_ME } from \"../../apollo/queries/account\";\n\nimport \"./dashboard.scss\";\n\nconst Dashboard = () => {\n  const { data, error, loading } = useQuery(GET_ME);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <Redirect to=\"/login\" />;\n\n  return (\n    <div className=\"dashboard-container\">\n      <h1>{`Welcome ${data?.me?.firstName}!`}</h1>\n    </div>\n  );\n\n  return;\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}