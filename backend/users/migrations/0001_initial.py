# Generated by Django 3.0.1 on 2020-07-31 20:07

import django.contrib.postgres.fields
from django.db import migrations, models
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'A user is already registered with this email address'}, max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=50, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='last name')),
                ('preferred_name', models.CharField(blank=True, max_length=120, null=True, verbose_name='preferred name')),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='GPA')),
                ('act_score', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='ACT score')),
                ('sat_score', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='SAT score')),
                ('efc', models.IntegerField(blank=True, null=True, verbose_name='Expected Family Contribution')),
                ('terms_and_conditions', models.BooleanField(default=False)),
                ('pronouns', models.CharField(choices=[(None, ''), ('he', 'He/His'), ('she', 'She/Hers'), ('they', 'They/their'), ('other', 'Other')], default=None, max_length=10, null=True, verbose_name='pronoun')),
                ('ethnicity', models.CharField(choices=[(None, ''), ('american indian and alaska native', 'American Indian/Alaska Native'), ('asian', 'Asian'), ('black and african', 'Black/African'), ('hispanic and latinx', 'Hispanic/Latinx'), ('native hawaiian and pacific islander', 'Native Hawaiian/Pacific Islander'), ('white', 'White'), ('other', 'Other')], default=None, max_length=40, null=True, verbose_name='ethinicity')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('transfer', 'Transfer'), ('parent', 'Parent'), ('staff', 'Staff'), ('other', 'Other')], max_length=10, null=True, verbose_name='user type')),
                ('highschool_graduation_year', models.CharField(max_length=4, null=True, verbose_name='high school graduation year')),
                ('income_quintile', models.CharField(choices=[('lo', '$0 - $30,000'), ('m1', '$30,001 - $48,000'), ('m2', '$48,001 - $75,000'), ('h1', '$75,001 - $110,000'), ('h2', '$110,001+')], max_length=2, null=True, verbose_name='income quintile')),
                ('found_from', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('instagram', 'Instagram'), ('facebook', 'Facebook'), ('parent', 'Parent'), ('school or district staff', 'School or District Staff'), ('friend', 'Friend'), ('other', 'Other')], max_length=25, verbose_name='found from'), default=list, size=None)),
                ('found_from_other_value', models.CharField(blank=True, max_length=75, null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
    ]
